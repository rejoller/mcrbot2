
import openai
import telebot
from google.oauth2 import service_account
from googleapiclient.discovery import build
from telebot import types

import json
import time
from urllib3.exceptions import ReadTimeoutError
from fuzzywuzzy import fuzz
from prettytable import PrettyTable
from pretty_html_table import build_table
import openpyxl
import logging
from openpyxl import Workbook
from openpyxl.writer.excel import save_virtual_workbook
from openpyxl.utils import get_column_letter
from io import BytesIO
import re
import os
import matplotlib.pyplot as plt
import numpy as np
import tempfile
import pandas as pd
import gspread
import requests




user_messages = {}
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
additional_info_storage = {}
espd_info_storage = {}
szoreg_info_storage = {}
message_storage = {}
districts = ["–ê–±–∞–Ω—Å–∫–∏–π —Ä-–Ω", "–ê—á–∏–Ω—Å–∫–∏–π —Ä-–Ω", "–ö—É—Ä–∞–≥–∏–Ω—Å–∫–∏–π —Ä-–Ω"]
response_storage = {}
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot_token = '6263941409:AAE20_qJIMTw03dBYoH0_xcbugDs_4FzA5Y'
bot = telebot.TeleBot(bot_token)



openai.api_key = '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'
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞

bot = telebot.TeleBot(bot_token)
info_text_storage = {}



import csv
from datetime import datetime

def log_user_data(user_id, first_name, last_name, username, message_text):
    file_path = 'users_data.csv'
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª. –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    try:
        with open(file_path, 'x', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Timestamp', 'User ID', 'First Name', 'Last Name', 'Username', 'Message'])
    except FileExistsError:
        pass

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
    with open(file_path, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([current_time, user_id, first_name, last_name, username, message_text])

def log_user_data_from_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    message_text = message.text

    log_user_data(user_id, first_name, last_name, username, message_text)



@bot.message_handler(commands=['help'])
def handle_help_command(message):
    log_user_data_from_message(message)
    help_text = (
        '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏ /2g /3g –∏–ª–∏ /4g. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –±–µ–∑ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –∂–º–∏ /nomobile\n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –§–ê–ü –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /fp\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –ê–≥.–ì–û–∏–ß–° –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /ago\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¢–û–†–ö–ù–î, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ç–æ—Ä" –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä, "—Ç–æ—Ä –ï–Ω–∏—Å–µ–π—Å–∫–∏–π".\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É –∫—Ä–∞—é, –∂–º–∏ /knd_kraj\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n\n'
        '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.')
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['knd_kraj'])
def handle_knd_kraj_command(message):
    log_user_data_from_message(message)
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    handle_knd_kraj_message(message)

@bot.message_handler(commands=['fp'])
def handle_fp_command(message):
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
    user_first_name = message.from_user.first_name
    bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
    log_user_data_from_message(message)
    fp_data, fp_headers = load_fp_data()

    # –ü–µ—Ä–µ–¥–∞–π—Ç–µ fp_data –∏ fp_headers –≤ —Ñ—É–Ω–∫—Ü–∏—é handler_fp_message
    handler_fp_message(message, fp_data, fp_headers)
    del fp_data
    del fp_headers

@bot.message_handler(commands=['ago'])
def handle_ago_command(message):
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –ê–≥–ì–û–∏–ß–°
    user_first_name = message.from_user.first_name
    bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
    log_user_data_from_message(message)
    aggoics_data, aggoics_headers = load_aggoics_data()

    # –ü–µ—Ä–µ–¥–∞–π—Ç–µ aggoics_data –∏ aggoics_headers –≤ —Ñ—É–Ω–∫—Ü–∏—é handler_aggoics_message
    handler_aggoics_message(message, aggoics_data, aggoics_headers)
    del aggoics_data
    del aggoics_headers

from datetime import datetime, timedelta

@bot.message_handler(commands=['otpusk'])
def handle_otpusk_command(message, days_ahead=14):
    # –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—É—Å–∫–∞—Ö
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    log_user_data_from_message(message)
    otpusk_data = load_otpusk_data()

    # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ –∏ —É—Ö–æ–¥—è—Ç –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
    employees_on_vacation, employees_starting_vacation_soon = get_employees_on_vacation(otpusk_data, days_ahead)

    response = ""

    if employees_on_vacation:
        response += '–°–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:\n\n'
        for row in employees_on_vacation:
            response += f"{row[0]}, {row[1]}\n"
            response += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {row[3]}\n"
            response += f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {row[4]}\n\n"

    if employees_starting_vacation_soon:
        response += f"\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —É—Ö–æ–¥—è—â–∏–µ –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ {days_ahead} –¥–Ω–µ–π:\n\n"
        for row in employees_starting_vacation_soon:
            response += f"{row[0]}, {row[1]}\n"
            response += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞: {row[3]}\n"
            response += f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞: {row[4]}\n\n"

    if not response:
        response = "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ, –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç–ø—É—Å–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π."

    bot.send_message(message.chat.id, response)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ API Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = '/home/rejoller/mcrbot/credentials.json'
creds = None
creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# ID —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = '1lA6wXSOmi6nj4HDOpFdzm4_KaUQAAakNNxOyXx7p1ZQ'


def split_message(message, max_length=4096):
    if len(message) <= max_length:
        return [message]

    messages = []
    while len(message) > max_length:
        split_index = message[:max_length].rfind('\n')
        if split_index == -1:
            split_index = max_length

        messages.append(message[:split_index])
        message = message[split_index:].lstrip()

    if message:
        messages.append(message)

    return messages


def split_message_table(headers, data, max_message_length=4096):
    table = PrettyTable()
    table.field_names = headers

    for row in data:
        if len(row) == len(headers):
            table.add_row(row)
        else:
            print(f"Skipping row with incorrect number of values: {row}")

    table_str = table.get_string()

    messages = []
    lines = table_str.split('\n')
    current_message = lines[0] + '\n' + lines[1] + '\n'

    for row in lines[2:]:
        test_message = current_message + row + '\n'

        if len(test_message) <= max_message_length:
            current_message = test_message
        else:
            messages.append(f"<pre>{current_message.strip()}</pre>")
            current_message = lines[0] + '\n' + lines[1] + '\n' + row + '\n'

    if current_message:
        messages.append(f"<pre>{current_message.strip()}</pre>")

    return messages



def get_value(row, index, default_value=''):
    try:
        return row[index]
    except IndexError:
        return default_value


def normalize_text_v2(text):
    text = text.lower().replace('—ë', '–µ').replace('—Ä-–Ω', '—Ä–∞–π–æ–Ω').replace('-', ' ')
    text = re.sub(r'(N|‚Ññ|No)', 'N', text, flags=re.IGNORECASE)
    text = text.replace(' —Ä–∞–π–æ–Ω', '').strip()
    return text


def search_values(query):
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='goroda2.0!A1:W1721').execute()
    rows = result.get('values', [])
    normalized_query = normalize_text_v2(query)
    found_values_a = [row for row in rows if normalized_query == normalize_text_v2(row[0])]
    found_values_s = [row for row in rows if fuzz.token_sort_ratio(normalized_query, normalize_text_v2(row[18])) >= 99]

    return found_values_a, found_values_s


headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∞', '–¢–∞–∫—Å–æ—Ñ–æ–Ω', '–°–ó–û (—É–∑–µ–ª)']



from openpyxl.styles import Font, Alignment, Border, Side, PatternFill

from openpyxl.styles import Alignment, Border, Font, PatternFill, Side

def create_excel_file(headers, data):
    wb = Workbook()
    ws = wb.active

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(name='Arial', bold=True)
    header_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_font = Font(name='Arial')
    data_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)

    # –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
    border = Border(left=Side(style='thin'),
                    right=Side(style='thin'),
                    top=Side(style='thin'),
                    bottom=Side(style='thin'))

    # –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')

    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        ws.column_dimensions[col_letter].width = 20
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.alignment = header_alignment
        cell.border = border
        cell.fill = header_fill

    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            cell = ws.cell(row=row_num, column=col_num, value=cell_data)
            cell.font = data_font
            cell.alignment = data_alignment
            cell.border = border

    file_name = "test_file.xlsx"
    wb.save(file_name)
    print(f"File saved as {file_name}")
    return file_name

def create_excel_file_2(headers, data):
    wb = Workbook()
    ws = wb.active

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(name='Arial', bold=True)
    header_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)

    # –®—Ä–∏—Ñ—Ç –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_font = Font(name='Arial')
    data_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)

    # –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
    border = Border(left=Side(style='thin'),
                    right=Side(style='thin'),
                    top=Side(style='thin'),
                    bottom=Side(style='thin'))

    # –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_fill = PatternFill(start_color='FFFF00', end_color='FFFF00', fill_type='solid')

    for col_num, header in enumerate(headers, 1):
        col_letter = get_column_letter(col_num)
        ws.column_dimensions[col_letter].width = 20
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = header_font
        cell.alignment = header_alignment
        cell.border = border
        cell.fill = header_fill

    for row_num, row_data in enumerate(data, 2):
        for col_num, cell_data in enumerate(row_data, 1):
            cell = ws.cell(row=row_num, column=col_num, value=cell_data)
            cell.font = data_font
            cell.alignment = data_alignment
            cell.border = border

    excel_file = BytesIO()
    wb.save(excel_file)
    excel_file.seek(0)
    return excel_file


import io
from openpyxl.styles import Font, Alignment, Border, Side



def adjust_column_width(worksheet):
    for col in worksheet.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            value = str(cell.value)
            length = len(value.encode('utf-8'))
            if length > max_length:
                max_length = length

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞
        estimated_width = max_length * 0.7  # –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞–∑–Ω—ã—Ö —à–∏—Ä–∏–Ω —Å–∏–º–≤–æ–ª–æ–≤
        worksheet.column_dimensions[column].width = estimated_width



from io import BytesIO

def convert_to_excel(data):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.sheet_view.showGridLines = False
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_font = Font(bold=True, size=12)
    header_alignment = Alignment(horizontal='center', vertical='center')
    header_border = Border(left=Side(style='thin'),
                           right=Side(style='thin'),
                           top=Side(style='thin'),
                           bottom=Side(style='thin'))
    header_fill = PatternFill(start_color="AED6F1",
                              end_color="AED6F1",
                              fill_type="solid")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_font = Font(size=11)
    data_alignment = Alignment(horizontal='left', vertical='center')
    data_border = Border(left=Side(style='thin'),
                         right=Side(style='thin'),
                         top=Side(style='thin'),
                         bottom=Side(style='thin'))
    data_fill = PatternFill(start_color="ECECEC",
                            end_color="ECECEC",
                            fill_type="solid")

    for row_idx, row in enumerate(data, start=1):
        for col_idx, value in enumerate(row, start=1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            if row_idx == 1:
                cell.font = header_font
                cell.alignment = header_alignment
                cell.border = header_border
                cell.fill = header_fill
            else:
                cell.font = data_font
                cell.alignment = data_alignment
                cell.border = data_border
                if row_idx % 2 == 0:
                    cell.fill = data_fill

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    adjust_column_width(ws)

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
    ws.auto_filter.ref = f"A1:{get_column_letter(ws.max_column)}{ws.max_row}"

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ws.freeze_panes = "A2"

    buffer = io.BytesIO()
    wb.save(buffer)
    buffer.seek(0)
    return buffer

def load_goroda_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='goroda2.0!A1:T1721').execute()
    rows = result.get('values', [])
    return rows

import folium
from telebot.types import InputFile
from folium.plugins import MarkerCluster


def create_map_with_markers(rows):
    map_with_markers = folium.Map(location=[59.664482, 91.913147], zoom_start=10)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤
    marker_cluster = MarkerCluster().add_to(map_with_markers)

    for row in rows:
        if row[7] and row[8]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞
            folium.Marker(
                location=[float(row[7]), float(row[8])],
                popup=row[1],
                icon=None,
            ).add_to(marker_cluster)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–ª–∞—Å—Å–æ–º leaflet-control-attribution
    map_with_markers.get_root().html.add_child(folium.Element("<style>.leaflet-control-attribution { display: none; }</style>"))

    return map_with_markers


def webAppKeyboard(url):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    webAppTest = types.WebAppInfo(url)
    one_butt = types.InlineKeyboardButton(text="–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", web_app=webAppTest)
    two_butt = types.InlineKeyboardButton(text="–ü–ö", url=url)
    keyboard.add(one_butt, two_butt)
    return keyboard #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


def webAppKeyboard_jt(url):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    webAppTest = types.WebAppInfo(url)
    button = types.InlineKeyboardButton(text="–æ—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", web_app=webAppTest)

    keyboard.add(button)
    return keyboard #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É




def filter_and_send_data(message, filter_func, command):
    goroda_data = load_goroda_data()
    headers = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ 2010', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ 2020', '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å', '–ü—Ä–æ–≥—Ä–∞–º–º–∞']
    filtered_data = [headers]
    filtered_goroda_data = []

    for row in goroda_data:
        if filter_func(row):
            filtered_row = [row[i] if i < len(row) else '' for i in [1, 2, 5, 3, 11]]
            filtered_data.append(filtered_row)
            filtered_goroda_data.append(row)

    # –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    map_with_markers = create_map_with_markers(filtered_goroda_data)
    map_filename = f"{command}_map.html"
    map_with_markers.save(map_filename)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Excel –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    buffer = convert_to_excel(filtered_data)
    filename = f"{command}.xlsx"
    with open(filename, "wb") as excel_file:
        excel_file.write(buffer.getvalue())

    with open(filename, "rb") as excel_file:
        document = InputFile(excel_file)
        bot.send_document(message.chat.id, document=document, caption="–°–ø–∏—Å–æ–∫ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")

    os.remove(filename)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π
   # with open(map_filename, "rb") as map_file:
    #    document = InputFile(map_file)
      #  bot.send_document(message.chat.id, document=document, caption=map_filename)

    os.remove(map_filename)
    url = f"https://rejoller.pythonanywhere.com/{command}"
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=webAppKeyboard(url))




def filter_2g(row):
    pattern = r"\b(2G|3G|4G)\b"
    result = re.findall(pattern, row[3])
   # filename = "2G.xlsx"
    return bool(result)

def filter_3g(row):
    pattern = r"\b(3G|4G)\b"
    result = re.findall(pattern, row[3])
    return bool(result)

def filter_4g(row):
    return "4G" in row[3]

def filter_nomobile(row):
    return row[3] == "-"








@bot.message_handler(commands=['2g'])
def handle_2g_command(message):
    log_user_data_from_message(message)
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    filter_and_send_data(message, filter_2g, "2G")

@bot.message_handler(commands=['3g'])
def handle_3g_command(message):
    log_user_data_from_message(message)
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    filter_and_send_data(message, filter_3g, "3G")

@bot.message_handler(commands=['4g'])
def handle_4g_command(message):
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    filter_and_send_data(message, filter_4g, "4G")

@bot.message_handler(commands=['nomobile'])
def handle_nomobile_command(message):
    bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ')
    filter_and_send_data(message, filter_nomobile, "nomobile")


@bot.message_handler(commands=['jt'])
def handle_jt_command(message):
    log_user_data_from_message(message)

    url = f"https://fantastic-engine.vercel.app/"
    bot.send_message(message.chat.id, "üòÅ")
    time.sleep(3)
    bot.send_message(message.chat.id, "ü§≠", reply_markup=webAppKeyboard_jt(url))






def load_fp_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='–§–ê–ü!A1:M55').execute()
    rows = result.get('values', [])

    fp_data = []
    fp_headers = ['–ê–¥—Ä–µ—Å', '–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è']

    for row in rows:
        # –í—ã–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã B, C, D, F, G, H, I
        if any(row) and "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ"  not in row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ò—Å–∫–ª—é—á"
            filled_row = [row[i] if i < len(row) else '' for i in [1, 2, 3, 5, 6, 7, 8]]
            fp_data.append(filled_row)

    return fp_data, fp_headers

def load_aggoics_data():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='–ê–≥–ì–û–∏–ß–°!A1:P250').execute()
    rows = result.get('values', [])

    aggoics_data = []
    aggoics_headers = ['–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ê–¥—Ä–µ—Å', '–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å']

    for row in rows:
        # –í—ã–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã D, E, F, G, I, J
        if any(row):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            filled_row = [row[i] if i < len(row) else '' for i in [3, 4, 5, 6, 8, 9]]
            aggoics_data.append(filled_row)

    return aggoics_data, aggoics_headers

def load_otpusk_data():
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='otpusk!A1:F30').execute()
    rows = result.get('values', [])
    return rows





def get_employees_on_vacation(otpusk_data, days_ahead=3):
    today = datetime.today().date()
    future_vacation_start = today + timedelta(days=days_ahead)
    employees_on_vacation = []
    employees_starting_vacation_soon = []

    for row_idx, row in enumerate(otpusk_data):
        if row_idx == 0:  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            continue
        if len(row) >= 5:
            try:
                start_date = datetime.strptime(row[3], "%d.%m.%Y").date()
                end_date = datetime.strptime(row[4], "%d.%m.%Y").date()

                if start_date <= today <= end_date:
                    employees_on_vacation.append(row)

                if today < start_date <= future_vacation_start:
                    employees_starting_vacation_soon.append(row)

            except ValueError:
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã

    return employees_on_vacation, employees_starting_vacation_soon







def create_pie_chart(yes_count, no_count, filename):
    labels = ['–ï—Å—Ç—å', '–ù–µ—Ç']
    sizes = [yes_count, no_count]
    colors = ['#2ecc71', '#e74c3c']

    # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç figure —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –≤ –¥—é–π–º–∞—Ö
    plt.figure(figsize=(2, 2))  # –ó–¥–µ—Å—å 2.5 –¥—é–π–º–∞ - —ç—Ç–æ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã

    plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
    plt.axis('equal')
    plt.savefig(filename, dpi=400,
                bbox_inches='tight')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (DPI) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä bbox_inches
    plt.clf()


def create_bar_chart(data, filename):
    labels, yes_values, no_values = zip(*data)

    total_values = [yes + no for yes, no in zip(yes_values, no_values)]
    yes_percentages = [yes / total * 100 if total != 0 else 0 for yes, total in zip(yes_values, total_values)]
    no_percentages = [no / total * 100 if total != 0 else 0 for no, total in zip(no_values, total_values)]

    labels = labels[1:]
    yes_percentages = yes_percentages[1:]
    no_percentages = no_percentages[1:]

    y = np.arange(len(labels))
    width = 0.6
    colors = ['#2ecc71', '#e74c3c']

    fig, ax = plt.subplots(figsize=(12, 16), dpi=300)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ DPI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    rects1 = ax.barh(y, yes_percentages, label='–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥', color=colors[0], align='center')
    rects2 = ax.barh(y, no_percentages, label='–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥', left=yes_percentages, color=colors[1],
                     align='center')

    ax.set_title('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–û–†–ö–ù–î –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º –∫—Ä–∞–µ')
    ax.set_yticks(y)
    ax.set_yticklabels(labels)
    ax.legend()

    xmin = 0
    xmax = 100
    ax.set_xlim([xmin, xmax])

    def autolabel(rects, labels):
        for rect, label in zip(rects, labels):
            width = rect.get_width()
            ax.annotate('{:.1f}%'.format(label),
                        xy=(width, rect.get_y() + rect.get_height() / 2),
                        xytext=(3, 0),
                        textcoords="offset points",
                        ha='left', va='center')

    autolabel(rects1, yes_percentages)
    # autolabel(rects2, no_percentages)

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()


data = [
    ('–†–∞–π–æ–Ω 1', 5, 10),
    ('–†–∞–π–æ–Ω 2', 10, 15),
    ('–†–∞–π–æ–Ω 3', 20, 5),
    ('–†–∞–π–æ–Ω 4', 30, 25),
    ('–†–∞–π–æ–Ω 5', 50, 20),
]

create_bar_chart(data, 'output.png')


def search_szofed_values(column_4_value):
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='szofed!A1:M2412').execute()
    rows = result.get('values', [])

    found_values = [row for row in rows if column_4_value.lower() == row[0].lower()]

    return found_values


def search_espd_values(query):
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='espd!A1:AL1466').execute()
    rows = result.get('values', [])
    found_values = [row for row in rows if query.lower() == row[0].lower()]
    return found_values


def search_szoreg_values(query):
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='szoreg!A1:Q1700').execute()
    rows = result.get('values', [])

    found_values = [row for row in rows if query.lower() == row[0].lower()]

    return found_values

def found_mszu_mo(query):
    service = build('sheets', 'v4', credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range='–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:P3200').execute()
    rows = result.get('values', [])

    found_values = [row for row in rows if query.lower() == row[0].lower()]

    return found_values



# def send_district_info(message, district):


# found_values_s = search_values(district)

# response = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ù–∞—Å–µ–ª–µ–Ω–∏–µ | –°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å | –ò–Ω—Ç–µ—Ä–Ω–µ—Ç | –ü—Ä–æ–≥—Ä–∞–º–º–∞ | –¢–∞–∫—Å–æ—Ñ–æ–Ω\n'
# response += '-' * 71 + '\n'
#  for row in found_values_s:
# if len(row) >= 19:  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ row –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
# response += f"{row[18]} | {row[2]} | {row[3]} | {row[9]} | {row[11]} | {row[12]}\n"


#  messages = split_message(response)
# for msg in messages:
# if msg:  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
#  bot.send_message(message.chat.id, msg, parse_mode='HTML')

# @bot.message_handler(func=lambda message: any(re.match(f"/{district}", message.text) for district in districts))
# def handle_district_command(message):
#  command = message.text[1:]  # –£–¥–∞–ª–∏—Ç–µ —Å–∏–º–≤–æ–ª '/' –∏–∑ –∫–æ–º–∞–Ω–¥—ã
# send_district_info(message, command)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_first_name = message.from_user.first_name
    bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤—è–∑–∏ –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–º –∫—Ä–∞–µ. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ö—É—Ä–∞–≥–∏–Ω–æ" –∏–ª–∏ "–ê–±–∞–Ω—Å–∫–∏–π")\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, –≤—ã–±–µ—Ä–∏ /2g /3g –∏–ª–∏ /4g. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –±–µ–∑ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –∂–º–∏ /nomobile \n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –§–ê–ü –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /fp\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –ê–≥.–ì–û–∏–ß–° –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –ü–ê–û "–†–æ—Å—Ç–µ–ª–µ–∫–æ–º" –Ω–∞–∂–º–∏ /ago\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –¢–û–†–ö–ù–î, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ç–æ—Ä" –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. '
        '–ù–∞–ø—Ä–∏–º–µ—Ä, "—Ç–æ—Ä –ï–Ω–∏—Å–µ–π—Å–∫–∏–π".\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É –∫—Ä–∞—é, –∂–º–∏ /knd_kraj\n\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ, –∂–º–∏ /otpusk\n\n'
        '–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ @rejoller.')


def preprocess_rows(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 1:
            lemmatized_keywords = {token.lemma_ for token in nlp(row[1].lower()) if not token.is_stop and not token.is_punct}
            preprocessed_rows.append((row, lemmatized_keywords))
    return preprocessed_rows






import spacy

nlp = spacy.load("ru_core_news_sm")

def check_mszu_column_b(user_message):
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Google Sheets
    service = build('sheets', 'v4', credentials=creds)

    # –£–∫–∞–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ú–°–ó–£"
    range_name = '–ú–°–ó–£!A1:P150'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫
    result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=range_name).execute()
    values = result.get('values', [])
    preprocessed_values = preprocess_rows(values)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é spacy
    user_doc = nlp(user_message.lower())

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    user_keywords = {token.lemma_ for token in user_doc if not token.is_stop and not token.is_punct}

    # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–æ–ª–±—Ü–µ B
    matching_rows = [row for row, lemmatized_keywords in preprocessed_values if user_keywords == lemmatized_keywords]


    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not matching_rows:
        matching_rows = [row for row, lemmatized_keywords in preprocessed_values if user_keywords.intersection(lemmatized_keywords)]


    return matching_rows if len(matching_rows) > 0 else None








import nltk

def ngrams(sequence, n):
    return list(nltk.ngrams(sequence, n))

def jaccard_similarity(a, b):
    a_set = set(a)
    b_set = set(b)
    return len(a_set.intersection(b_set)) / len(a_set.union(b_set))

def preprocess_rows_2(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ B
            b_column_value = row[1]  # –ò–Ω–¥–µ–∫—Å 1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É B
            row_doc = nlp(b_column_value.lower())
            row_keywords = {}
            for i, token in enumerate(row_doc):
                if not token.is_stop and not token.is_punct and len(token) > 2:
                    weight = 2 if i + 1 < len(row_doc) and row_doc[i + 1].text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
                    row_keywords[token.lemma_] = weight
            preprocessed_rows.append((row, row_keywords))
    return preprocessed_rows

def weighted_keyword_match(user_keywords, row_keywords):
    user_keyword_set = set(user_keywords.keys())
    row_keyword_set = set(row_keywords.keys())

    intersection = user_keyword_set.intersection(row_keyword_set)
    union = user_keyword_set.union(row_keyword_set)

    if not union:
        return 0

    weighted_intersection_sum = sum([user_keywords.get(k, 0) * row_keywords.get(k, 0) for k in intersection])
    weighted_union_sum = sum([user_keywords.get(k, 0) for k in union]) + sum([row_keywords.get(k, 0) for k in union]) - weighted_intersection_sum

    return weighted_intersection_sum / weighted_union_sum

def check_mszu_mo(user_message):
    user_doc = nlp(user_message.lower())
    user_keywords = {
        token.lemma_: 2 if token.text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
        for token in user_doc
        if not token.is_stop and not token.is_punct and len(token) > 2
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Google Sheets
    service = build('sheets', 'v4', credentials=creds)

    index_range_name = 'mszuindex!A1:C500'
    main_range_name = '–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:T3200'

    index_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=index_range_name).execute()
    main_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=main_range_name).execute()

    index_values = index_result.get('values', [])
    main_values = main_result.get('values', [])

    preprocessed_index_values = preprocess_rows_2(index_values)

    matching_rows = []
    for index_row, index_keywords in preprocessed_index_values:
        if weighted_keyword_match(user_keywords, index_keywords) >= 0.75:
            index_c_value = index_row[2]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ C —Ç–∞–±–ª–∏—Ü—ã mszuindex
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)" –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ J —Å index_c_value
            matched_rows = [row for row in main_values if row[9] == index_c_value]
            matching_rows.extend(matched_rows)

    return matching_rows

def preprocess_rows_3(rows):
    preprocessed_rows = []
    for row in rows:
        if len(row) > 5:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ F
            f_column_value = row[5]  # –ò–Ω–¥–µ–∫—Å 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±—Ü—É F
            row_doc = nlp(f_column_value.lower())
            row_keywords = {}
            for i, token in enumerate(row_doc):
                if not token.is_stop and not token.is_punct and len(token) > 2:
                    weight = 2 if i + 1 < len(row_doc) and row_doc[i + 1].text.lower() in ["—Ä–∞–π–æ–Ω", "–≥–æ", "–º–æ", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
                    row_keywords[token.lemma_] = weight
            preprocessed_rows.append((row, row_keywords))
    return preprocessed_rows

def weighted_keyword_match(user_keywords, row_keywords):
    user_keyword_set = set(user_keywords.keys())
    row_keyword_set = set(row_keywords.keys())

    intersection = user_keyword_set.intersection(row_keyword_set)
    union = user_keyword_set.union(row_keyword_set)

    if not union:
        return 0

    weighted_intersection_sum = sum([user_keywords.get(k, 0) * row_keywords.get(k, 0) for k in intersection])
    weighted_union_sum = sum([user_keywords.get(k, 0) for k in union]) + sum([row_keywords.get(k, 0) for k in union]) - weighted_intersection_sum

    return weighted_intersection_sum / weighted_union_sum


def check_mszu_mo_2(user_message):
    user_doc = nlp(user_message.lower())
    user_keywords = {
        token.lemma_: 2 if token.text.lower() in ["—Å–µ–ª—å—Å–æ–≤–µ—Ç", "—Ä–∞–π–æ–Ω", "–æ–∫—Ä—É–≥", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"] else 1
        for token in user_doc
        if not token.is_stop and not token.is_punct and len(token) > 2
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Google Sheets
    service = build('sheets', 'v4', credentials=creds)

    index_range_name = 'mszuindex!A1:G500'
    main_range_name = '–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)!A1:T3200'

    index_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=index_range_name).execute()
    main_result = service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=main_range_name).execute()

    index_values = index_result.get('values', [])
    main_values = main_result.get('values', [])

    preprocessed_index_values = preprocess_rows_3(index_values)

    matching_rows = []
    for index_row, index_keywords in preprocessed_index_values:
        if weighted_keyword_match(user_keywords, index_keywords) >= 0.75:
            index_g_value = index_row[6]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ G —Ç–∞–±–ª–∏—Ü—ã mszuindex
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ú–°–ó–£-–û–ú–°–£ (—Ç–µ—Å—Ç)" –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ K —Å index_g_value
            matched_rows = [row for row in main_values if row[10] == index_g_value]
            matching_rows.extend(matched_rows)

    return matching_rows

def send_request_to_openai_post(chat_id):
    #log_user_data_from_message(chat_id)
    global info_text_storage
    trimmed_info = info_text_storage[chat_id][:7000]
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–µ—Å—Å-—Å–ª—É–∂–±—ã –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –æ –≤–∏–∑–∏—Ç–∞—Ö –º–∏–Ω–∏—Å—Ç—Ä–∞ –†–∞—Å–ø–æ–ø–∏–Ω–∞ –ù–∏–∫–æ–ª–∞—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞"},

        {"role": "assistant", "content": trimmed_info},

        {"role": "user", "content": "–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ '–í–ö', –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º—É –ø—É–Ω–∫—Ç—É, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ —Ç–∞–º –≥–¥–µ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞. –°–∫–∞–∂–∏ —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –≤—Å—Ç–µ—Ä—á–∏ —Å –∂–∏—Ç–µ–ª—è–º–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥ —Å–≤—è–∑–∏, –∞ —Ç–∞–∫–∂–µ  –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ –≥–ª–∞–≤–æ–π —Ä–∞–π–æ–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ—Ç –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –∫–∞–∫–æ–≥–æ-—Ç–æ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã –°–ó–û, —Ç–æ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤–∏–∑–∏—Ç –≤ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –∫–∞–∫—É—é –ø–æ–ª—å–∑—É –ø—Ä–∏–Ω–æ—Å–∏—Ç. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ, –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫ –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –í–∏–∑–∏—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ. "}



    ]
   # print("Sending request to OpenAI with messages:", messages)
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        max_tokens=1500,
        n=1,
        temperature=0.6,
    )
   # print("Received response from OpenAI:", response)
    return response['choices'][0]['message']['content']




def send_request_to_openai(chat_id):
    #log_user_data_from_message(chat_id)
    global info_text_storage
    trimmed_info = info_text_storage[chat_id][:7000]
    messages = [
        {"role": "system", "content": "—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è —Ç–µ–±–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏, –Ω–∞–ø—Ä–∞–≤–∏–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –∑–∞—è–≤–∏—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –ø–∏—Å—å–º–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –∫–∞–∫ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è. –ò–∑–±–µ–≥–∞–π —Ç–∞–≤—Ç–æ–ª–æ–≥–∏–π. "
        "–≠—Ç–æ –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º\n"
        "1. –°–ó–û - —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –ø–µ—Ä–∏–æ–¥ —Å 2019 –ø–æ 2021 –≥–æ–¥ –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã '–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏' –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–∏ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –º–µ–∂–¥—É –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–§ –∏ –ê–û '–≠–†-–¢–µ–ª–µ–∫–æ–º –•–æ–ª–¥–∏–Ω–≥'. –û –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –°–ó–û —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø–æ—Å–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –°–ó–û –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–®–ü–î –∏–ª–∏ –í–û–õ–° –∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ–±–æ–ª—å—à–æ–π –∏ —Ç–∞–º –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –º–µ—Å—Ç–Ω—ã–º –∂–∏—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
        ". –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –∂–∏—Ç–µ–ª—è–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â—É—é –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ê–û '–≠–†-–¢–µ–ª–µ–∫–æ–º –•–æ–ª–¥–∏–Ω–≥'. –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: +7 (3912) 16-72-16, –ø–æ—á—Ç–∞: krasnoyarsk@domru.ru."
        "2. –û —Ç–∞–∫—Å–æ—Ñ–æ–Ω–∞—Ö –≥–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –æ—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç —Å–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å –Ω–∏ –∫–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è. –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–≤—è–∑–∏, —Ç–æ —É–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ –Ω–∏—Ö –Ω–µ –Ω—É–∂–Ω–æ\n"
        "3. –°—É–±–∏—Å–¥–∏—è (–≥–æ–¥) - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –∑–∞ —Å—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∫—Ä–∞–µ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞\n"
        "4. –£–¶–ù 1.0 –∏–ª–∏ –£–¶–ù 2.0 - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞'. –û–Ω —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ü–ê–û '–†–æ—Å—Ç–µ–ª–µ–∫–æ–º' –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–ª—é—á–µ–Ω —Å –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –†–§\n"

        "5. —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≤–æ–∑—å–º–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤ '–ù–∞—Å–µ–ª–µ–Ω–∏–µ 2020' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –£–¶–ù. –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –æ—Ç 100 –¥–æ 500 —á–µ–ª–æ–≤–µ–∫ –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –ø–æ—Å–ª–µ —Å–ª–æ–≤ '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å:'. –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É—Å–ª—É–≥ —Å–æ—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ 4G –¥–æ 2030 –≥–æ–¥–∞ –≤–æ –≤—Å–µ—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö –≥–¥–µ —Å–µ–π—á–∞—Å —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è.\n"
        "6. –Ω–µ –∑–∞–±—ã–≤–∞–π –∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –°–ó–û –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º.\n"
        "7. –ï—Å–ª–∏ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ '–°–ø—É—Ç–Ω–∏–∫' —Ç–æ —Å–æ–æ–±—â–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –û–û–û '–°–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å' - 8-800-555-69-92, info@satsvyaz.ru –∏ –ö–ë –ò—Å–∫—Ä–∞ 8-800-200-05-09 info@iskrakb.ru. –ù–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Ç–æ —É–ø–æ–º–∏–Ω–∞—Ç—å –æ –°–ø—É—Ç–Ω–∏–∫–æ–≤–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω—É–∂–Ω–æ"
        "7. –ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è —Å–æ —Å–≤—è–∑—å—é –≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∞—è, —Ç–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–±–Ω–∞–¥–µ–∂–∏—Ç—å\n"
        "8. –ê–û '–≠–†-–¢–µ–ª–µ–∫–æ–º –•–æ–ª–¥–∏–Ω–≥' –∏ –î–æ–º.—Ä—É —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ.\n"
        "9. –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤: '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å' —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ '—É–¥.', —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –æ—Ç –æ–±—ä–µ–∫—Ç–∞ —Å–≤—è–∑–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–µ–ª—å–µ—Ñ–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏\n"
        "10. –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤: '–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å' –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ —Å–∏–≥–Ω–∞–ª–∞, —Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –£–¶–ù 2.0\n "
        "9. –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å, —á—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è —Å —É—Ä–æ–≤–Ω–µ–º —Å–≤—è–∑–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∞—è, —Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∏.  –ú–¢–° 8 800 250 0890, –ú–µ–≥–∞—Ñ–æ–Ω 8 800 550‚Äë05‚Äë55, –¢–µ–ª–µ2 8800 555 0611, –ë–∏–ª–∞–π–Ω 8 800 700 0611\n "
        },
        {"role": "assistant", "content": "–ù–∞—á–∞–ª–æ —à–∞–±–ª–æ–Ω–∞. "
        "–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –ø–æ–¥–≤–∏–∂–Ω–æ–π —Ä–∞–¥–∏–æ—Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞) –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ.\n"
        "–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤—è–∑–∏, –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ —Å –∫–∞–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —É—Å–ª—É–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '—É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ú–µ–≥–∞—Ñ–æ–Ω —Å —É—Ä–æ–≤–Ω–µ–º —Å–∏–≥–Ω–∞–ª–∞ 4G')."
        "–ü–æ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–µ—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Å–æ–æ–±—â–∞–µ–º (—Ç—É—Ç —Ä–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ —Ç–∏–ø–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤ —Ç–∞–∫–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ: –í–û–õ–°, –ë–®–ü–î, –°–ø—É—Ç–Ω–∏–∫)."
        "(–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ '–ü—Ä–æ–≥—Ä–∞–º–º—ã' –∏–º–µ–µ—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ –ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: '–¢–∞–∫–∂–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤ (–∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ–¥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ '–ü—Ä–æ–≥—Ä–∞–º–º—ã') –≥–æ–¥—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞/–ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –£–¶–ù 1.0 –∏–ª–∏ –£–¶–ù 2.0)."
        "–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–º–µ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–µ—Ä—à–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –ª—é–±—ã–µ –Ω–æ–º–µ—Ä–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ç–∞–∫—Å–æ—Ñ–æ–Ω–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º –µ—Å–ª–∏ –Ω–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–∏). –ï—Å–ª–∏ –∏ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–∞ –Ω–µ—Ç, —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –æ –µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ )"

        "–ö–æ–Ω–µ—Ü —à–∞–±–ª–æ–Ω–∞."
        "–ø—Ä–∏–¥—É–º–∞–π —Å–∞–º –∫–∞–∫ –ø–æ–¥—ã—Ç–æ–∂–∏—Ç—å –ø–∏—Å—å–º–æ, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ –∏ –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –Ω–æ—Ç–µ, –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–æ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω"},
        {"role": "assistant", "content": trimmed_info},

        {"role": "user", "content": "–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∑–∞–≤ –≤—Å—ë –æ–± —ç—Ç–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –∏ —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "}



    ]
   # print("Sending request to OpenAI with messages:", messages)
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        max_tokens=1500,
        n=1,
        temperature=0.7,
    )
   # print("Received response from OpenAI:", response)
    return response['choices'][0]['message']['content']





def handle_digital_ministry_info(call):
    global info_text_storage
    chat_id = call.message.chat.id

    sticker_id = "CAACAgIAAxkBAAEhAotkX1-uvG-2lf3mufIMFqwDvpRyYwACKRUAAviLwEupQBIzh-Q46C8E"
    sticker_message = bot.send_sticker(call.message.chat.id, sticker_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º

    info_text = info_text_storage[chat_id]

    import threading
    def send_typing(max_attempts=30):  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ = 30
        attempts = 0
        while not message_sent and attempts < max_attempts:
            bot.send_chat_action(chat_id, 'typing')
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ "typing"
            attempts += 1

    message_sent = False
    threading.Thread(target=send_typing).start()

    try:
        openai_response = send_request_to_openai(chat_id)
        bot.send_message(chat_id, openai_response)
    finally:
        message_sent = True
        bot.delete_message(chat_id, sticker_message.message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è




def handle_digital_ministry_info_post(call):
    global info_text_storage
    chat_id = call.message.chat.id

    sticker_id = "CAACAgIAAxkBAAEhAotkX1-uvG-2lf3mufIMFqwDvpRyYwACKRUAAviLwEupQBIzh-Q46C8E"
    bot.send_sticker(call.message.chat.id, sticker_id)

    info_text = info_text_storage[chat_id]

    import threading
    def send_typing(max_attempts=30):  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ = 30
        attempts = 0
        while not message_sent and attempts < max_attempts:
            bot.send_chat_action(chat_id, 'typing')
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ "typing"
            attempts += 1

    message_sent = False
    threading.Thread(target=send_typing).start()

    try:
        openai_response = send_request_to_openai_post(chat_id)
        bot.send_message(chat_id, openai_response)
    except Exception as e:
        print(f"Error while sending message: {e}")
    finally:
        message_sent = True


weather_emoji_mapping = {
'thunderstorm with light rain': '‚õàÔ∏è',
'thunderstorm with rain': '‚õàÔ∏è',
'thunderstorm with heavy rain': '‚õàÔ∏è',
'light thunderstorm': '‚õàÔ∏è',
'thunderstorm': '‚õàÔ∏è',
'heavy thunderstorm': '‚õàÔ∏è',
'ragged thunderstorm': '‚õàÔ∏è',
'thunderstorm with light drizzle': '‚õàÔ∏è',
'thunderstorm with drizzle': '‚õàÔ∏è',
'thunderstorm with heavy drizzle': '‚õàÔ∏è',
'light intensity drizzle': 'üåßÔ∏è',
'drizzle': 'üåßÔ∏è',
'heavy intensity drizzle': 'üåßÔ∏è',
'light intensity drizzle rain': 'üåßÔ∏è',
'drizzle rain': 'üåßÔ∏è',
'heavy intensity drizzle rain': 'üåßÔ∏è',
'shower rain and drizzle': 'üåßÔ∏è',
'heavy shower rain and drizzle': 'üåßÔ∏è',
'shower drizzle': 'üåßÔ∏è',
'light rain': 'üåßÔ∏è',
'moderate rain': 'üåßÔ∏è',
'heavy intensity rain': 'üåßÔ∏è',
'very heavy rain': 'üåßÔ∏è',
'extreme rain': 'üåßÔ∏è',
'freezing rain': 'üåßÔ∏è',
'light intensity shower rain': 'üåßÔ∏è',
'shower rain': 'üåßÔ∏è',
'heavy intensity shower rain': 'üåßÔ∏è',
'ragged shower rain': 'üåßÔ∏è',
'light snow': '‚ùÑÔ∏è',
'snow': '‚ùÑÔ∏è',
'heavy snow': '‚ùÑÔ∏è',
'sleet': '‚ùÑÔ∏è',
'light shower sleet': '‚ùÑÔ∏è',
'shower sleet': '‚ùÑÔ∏è',
'light rain and snow': '‚ùÑÔ∏è',
'rain and snow': '‚ùÑÔ∏è',
'light shower snow': '‚ùÑÔ∏è',
'shower snow': '‚ùÑÔ∏è',
'heavy shower snow': '‚ùÑÔ∏è',
'mist': 'üå´Ô∏è',
'smoke': 'üå´Ô∏è',
'haze': 'üå´Ô∏è',
'sand/dust whirls': 'üå´Ô∏è',
'fog': 'üå´Ô∏è',
'sand': 'üå´Ô∏è',
'dust': 'üå´Ô∏è',
'volcanic ash': 'üå´Ô∏è',
'squalls': 'üå´Ô∏è',
'tornado': 'üå™Ô∏è',
'clear sky': '‚òÄÔ∏è',
'few clouds: 11-25%': 'üå§Ô∏è',
'scattered clouds: 25-50%': 'üå•Ô∏è',
'broken clouds: 51-84%': '‚òÅÔ∏è',
'overcast clouds: 85-100%': '‚òÅÔ∏è'
}








def get_weather(latitude, longitude, api_key):
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        weather_data = response.json()
        temp = weather_data["main"]["temp"]
        description = weather_data["weather"][0]["description"]
        emoji = weather_emoji_mapping.get(description, '')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        return f"{temp}¬∞C {emoji}"
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ."




def animated_text(bot, chat_id, message_id, base_text, final_text, delay=0.01):
    current_text = base_text
    unchanged_count = 0
    for i in range(len(base_text), len(final_text), 2):  # –∏–∑–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å –Ω–∞ 2
        bot.send_chat_action(chat_id, 'typing')
        time.sleep(delay)
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤—å—Ç–µ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞
        current_text += final_text[i:i+2] if i+2 <= len(final_text) else final_text[i:i+1]
        if current_text != base_text:
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=current_text)
                base_text = current_text
                unchanged_count = 0
            except telebot.apihelper.ApiTelegramException as e:
                if 'message is not modified' in str(e):
                    unchanged_count += 1
                    if unchanged_count >= 3:
                        break
                else:
                    raise e
        time.sleep(delay)






def send_request_to_openai_2(chat_id, message_text):
    #log_user_data_from_message(chat_id)
    global info_text_storage
    trimmed_info = info_text_storage.get(chat_id, "")[:7000]

    messages = [
        {"role": "system", "content": "–ó–∞–¥–∞—á–∞. [—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –æ–≤—Ç–µ—Ç–æ–≤ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω. –ò–∑–≤–ª–µ–∫–∞–π –∏–∑ –æ–±—Ä–∞—â–µ–Ω–∏–π —Å—É—Ç—å –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª—è–π –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–∏–º–µ—Ä–∞–º]\n"


        "1. –¢–µ–º–∞: [–ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∫–∏ –ø—Ä–∏ –±–µ–∑ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞]"
        " –û—Ç–≤–µ—Ç: [–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –±–µ–∑ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –≤ –ø–æ—á—Ç–æ–≤–æ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞ ‚Ññ 660130 –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ. –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—å—ë–π 7 —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 07.08.2001 ‚Ññ 115-–§–ó ¬´–û –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ç–º—ã–≤–∞–Ω–∏—é) –¥–æ—Ö–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å—Ç—É–ø–Ω—ã–º –ø—É—Ç–µ–º, –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞¬ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏–ª–∏ –∏–Ω—ã–º –∏–º—É—â–µ—Å—Ç–≤–æ–º, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª, –æ–±—è–∑–∞–Ω—ã –¥–æ –ø—Ä–∏—ë–º–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, —Ç.–µ. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –æ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–æ–º–µ—Ä–Ω—ã–º–∏.]"
        "2. –¢–µ–º–∞: [–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª]"
        "–û—Ç–≤–µ—Ç: [–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª, —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω. –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–æ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å—Ä–µ–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏ —Å –∂–∏—Ç–µ–ª—è–º–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.]"
        "3. –¢–µ–º–∞: [–ø–æ –≤–æ–ø—Ä–æ—Å—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ—á—Ç–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è ]"
        "–û—Ç–≤–µ—Ç: [–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ—á—Ç–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è  –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ. –ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª, —Å 27.07.2022 –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –∞ –∏–º–µ–Ω–Ω–æ —Å 10:00 –¥–æ 18:00, –ø–µ—Ä–µ—Ä—ã–≤ —Å 13:00 –¥–æ 14:00, —Å—É–±–±–æ—Ç–∞ —Å 10:00 –¥–æ 17:00, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ.]"
        "4. –¢–µ–º–∞: [–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö]"
        "–û—Ç–≤–µ—Ç: [–î–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è]"
        "5. –¢–µ–º–∞: [–ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–≤–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π, –ï–º–µ–ª—å—è–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω,  —Å. –ï–ª–æ–≤–æ–µ, —É–ª. –ë–µ—Ä–µ–∑–æ–≤–∞—è, 35 ]"
        "–û—Ç–≤–µ—Ç: [–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–≤–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π, –ï–º–µ–ª—å—è–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω,  —Å. –ï–ª–æ–≤–æ–µ, —É–ª. –ë–µ—Ä–µ–∑–æ–≤–∞—è, 35 –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ. –ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª, 28.01.2022 –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∫–ª—é—á–µ–Ω –≤ –∫–∞—Ä—Ç—É. –î–æ—Å—Ç–∞–≤–∫–∞ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—ã—à–µ –∞–¥—Ä–µ—Å—É –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.]"
        "6. –¢–µ–º–∞: [–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏  –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–µ–Ω—Å–∏–∏ –Ω–∞ –¥–æ–º ]"
        "–û—Ç–≤–µ—Ç: [–í –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —É—Å–ª—É–≥–∏  –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–µ–Ω—Å–∏–∏ –Ω–∞ –¥–æ–º –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –í–∞–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞  –ø–µ—Ä–µ–≤–æ–¥ –ø–µ–Ω—Å–∏–∏ –≤ –ü–æ—á—Ç–∞ –±–∞–Ω–∫.]"
        "7. –¢–µ–º–∞: [–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥ –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≠–≤–µ–Ω–∫–∏–π—Å–∫–æ–≥–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞]"
        "–û—Ç–≤–µ—Ç: [–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥ –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≠–≤–µ–Ω–∫–∏–π—Å–∫–æ–≥–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∫—Ä–∞—è —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ. –ü–æ –≤–æ–ø—Ä–æ—Å—É –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –∏–∑ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞ –≤ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –¢—É—Ä–∞, –ë–∞–π–∫–∏—Ç, –í–∞–Ω–∞–≤–∞—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≤ –∑–∏–º–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π (–¥–æ 2-—Ö –≤ –Ω–µ–¥–µ–ª—é), –∞ —Ç–∞–∫–∂–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ä–µ–π—Å (–¥–æ 50 –∫–≥). –í —Ç–æ –∂–µ –≤—Ä–µ–º—è –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–æ–ø–∏–≤—à–∏—Ö—Å—è –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–∞—Ä—Ç–µ—Ä–Ω—ã–µ —Ä–µ–π—Å—ã. –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –ø–æ—Å–µ–ª–∫–∏ –≠–≤–µ–Ω–∫–∏–π—Å–∫–æ–≥–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ (–∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ) –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–≤–∏–∞—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º (–≤–µ—Ä—Ç–æ–ª–µ—Ç) –æ–¥–∏–Ω –≤ —Ä–∞–∑ –Ω–µ–¥–µ–ª—é, –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º, –ø—Ä–æ—Ö–æ–¥—è—â–∏–º —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –£–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Å–ª–æ–∂–Ω—è—é—Ç –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π]"
        "8. –¢–µ–º–∞: [–Ω–∏–∑–∫–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –≤ –≠–≤–µ–Ω–∫–∏–π—Å–∫–æ–º –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ]"
        "–û—Ç–≤–µ—Ç: [–ü–æ –≤–æ–ø—Ä–æ—Å—É –Ω–∏–∑–∫–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Å 01.01.2022 –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (–æ—Ç 7% –¥–æ 9%) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ (–¥–∞–ª–µ–µ ‚Äì –û–ü–°), —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≠–≤–µ–Ω–∫–∏–π—Å–∫–æ–≥–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞.]"
        "10. –¢–µ–º–∞: [–ø—Ä–æ–±–ª–µ–º —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª ]"
        "–û—Ç–≤–µ—Ç: [–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Å–µ—Ç–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, –∑–∞—è–≤–æ–∫ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –û–ü–° –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ.]"
        "11. –¢–µ–º–∞: [–ù–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–¥–ª–µ–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ 662179 –≤ –ø. –ú–∞–ª–∏–Ω–æ–≤–∫–∞ –ê—á–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ ] "
        "–û—Ç–≤–µ—Ç:[–û–ü–° 662179 –≤ –ø. –ú–∞–ª–∏–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Å 04.05.2021 –≤ —Å–≤—è–∑–∏ —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∂–µ–ª–∞–Ω–∏—é –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä –Ω–∞ –≤–∞–∫–∞–Ω—Ç–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏¬ª, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º–∞—è –û–ü–° 662179 –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –û–ü–° 662150 –≥. –ê—á–∏–Ω—Å–∫–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ê—á–∏–Ω—Å–∫, –º–∫—Ä. 1-—ã–π, –¥. 43, –∫. 1, –ø–æ–º. 2, —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äì –ø—è—Ç–Ω–∏—Ü–∞ —Å 08:00 –¥–æ 20:00, —Å—É–±–±–æ—Ç–∞ —Å 9:00 –¥–æ 18:00, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 9:00 –¥–æ 14:00, –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ –æ–±–µ–¥. –û–∫–∞–∑–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —É—Å–ª—É–≥ –≤ –≤—ã–ø–ª–∞—Ç–Ω–æ–π –ø–µ—Ä–∏–æ–¥ —Å 03 –ø–æ 19 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏–µ–∑–∂–∞—é—â–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å –û–ü–° 662150 –≥. –ê—á–∏–Ω—Å–∫ —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é (–≤—Ç–æ—Ä–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥, —Å—É–±–±–æ—Ç–∞ —Å 9:00 –¥–æ 15:00). –í—Å–µ —É—Å–ª—É–≥–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—ã–ø–ª–∞—Ç–∞ –ø–µ–Ω—Å–∏–π –∏ –ø–æ—Å–æ–±–∏–π, –≤—ã–¥–∞—á–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø–µ—á–∞—Ç–Ω—ã—Ö –∏–∑–¥–∞–Ω–∏–π, –ø—Ä–∏—ë–º –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞–ª–æ–≥–æ–≤, —à—Ç—Ä–∞—Ñ–æ–≤, –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª—è–º –ø. –ú–∞–ª–∏–Ω–æ–≤–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ –ø–æ—á—Ç–∞–ª—å–æ–Ω–æ–º –û–ü–° 662179 –ø. –ú–∞–ª–∏–Ω–æ–≤–∫–∞ —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É —Å 09:00–¥–æ 15:00, –≤—ã—Ö–æ–¥–Ω—ã–µ ‚Äì –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä –Ω–∞ –≤–∞–∫–∞–Ω—Ç–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –û–ü–° 662179 –ø. –ú–∞–ª–∏–Ω–æ–≤–∫–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≥. –ê—á–∏–Ω—Å–∫–∞ –∏ –¥–æ–≤–µ–¥–µ–Ω–∞ –¥–æ —Å–≤–µ–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ú–∞–ª–∏–Ω–æ–≤—Å–∫–æ–≥–æ —Å–µ–ª—å—Å–æ–≤–µ—Ç–∞. –í–µ–¥–µ—Ç—Å—è –ø–æ–∏—Å–∫ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö.] "
        "12. –¢–µ–º–∞:[–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏]"
        "–û—Ç–≤–µ—Ç:[–ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –£–§–ü–° –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ –û–ü–° –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –∞–¥—Ä–µ—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –≥–æ–ª–æ–≤–Ω—ã–º –æ—Ñ–∏—Å–æ–º –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª. –£–§–ü–° –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –Ω–∞–ø—Ä–∞–≤–∏–ª–æ —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤ –∞–¥—Ä–µ—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤ –û–ü–°] "
        "13. –¢–µ–º–∞: [–£–ª—É—á—à–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ—á—Ç–æ–≤–æ–π —Å–≤—è–∑–∏ –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ] "
        "–û—Ç–≤–µ—Ç:[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π (–¥–∞–ª–µ–µ ‚Äì –ê–ü–°), –ø–æ–∑–≤–æ–ª—è—é—â–∏—Ö –ø–æ–ª—É—á–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ, –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –ê–¥—Ä–µ—Å–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ê–ü–° —Å–ª–µ–¥—É—é—â–∏–µ:"
            "- –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. –ê—ç—Ä–æ–≤–æ–∫–∑–∞–ª—å–Ω–∞—è, –¥. 1;"
            "- –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. –ê–ª–µ–∫—Å–µ–µ–≤–∞, –¥. 49;"
            "- –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. –ê—ç—Ä–æ–≤–æ–∫–∑–∞–ª—å–Ω–∞—è, –¥. 19;"
            "- –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. 78 –î–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫–æ–π –±—Ä–∏–≥–∞–¥—ã, –¥. 14–∞;"
            "- –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. 78 –î–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫–æ–π –±—Ä–∏–≥–∞–¥—ã, –¥. 11.] "
        "14. –¢–µ–º–∞: [–≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å]"
        "–û—Ç–≤–µ—Ç:[–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è (–¥–∞–ª–µ–µ ‚Äì –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ) —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–æ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Å–æ–æ–±—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∏ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –ø—Ä–æ–≤–µ–¥–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –ø–æ–∏—Å–∫—É –ø–æ—Å—ã–ª–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –í–∞–º–∏ –∞–¥—Ä–µ—Å—É. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å—ã–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞—Ç–æ–º] "
        "15. –¢–µ–º–∞:[–Ω–∏–∑–∫–∞—è –æ–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ] "
        "–û—Ç–≤–µ—Ç:[–ü–æ –≤–æ–ø—Ä–æ—Å—É –Ω–∏–∑–∫–æ–π –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –û–ü–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ —à—Ç–∞—Ç–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Å–µ–ª—å—Å–∫–æ–≥–æ –û–ü–° —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 31558 —Ä—É–±., –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ 25581 —Ä—É–±., –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞ 29630 —Ä—É–±. (—Å—É–º–º—ã —É–∫–∞–∑–∞–Ω—ã –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–Ω–∏–º–∞–µ–º–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, —Ä–∞–≤–Ω–æ–π 1,0 —à—Ç–∞—Ç–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ). –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –û–ü–° –∫—Ä–æ–º–µ –æ–∫–ª–∞–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–µ –¥–æ–ø–ª–∞—Ç—ã. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Å–µ—Ç–µ–≤–æ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥. ] "
        "16. –¢–µ–º–∞: [–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ –û–ü–° –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏] "
        "–û—Ç–≤–µ—Ç: [–ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ê–û ¬´–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏¬ª –ø–æ–º–µ—â–µ–Ω–∏–µ –û–ü–°  –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã –æ—Ç  ‚Ññ  (–¥–∞–ª–µ–µ ‚Äì –¥–æ–≥–æ–≤–æ—Ä).  –°–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç—É  –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—É–µ–º—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º —Ç–æ–ª—å–∫–æ —Å –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è. –¢–∞–∫–∂–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—É–Ω–∫—Ç—É  –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ–ª—å–∑—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–µ—Ä–µ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—É–µ–º–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è –±–µ–∑ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ê–û ¬´–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–º–æ–Ω—Ç–∞.]"
},
        {"role": "assistant", "content": message_text},


        {"role": "user", "content": "—Å–¥–µ–ª–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π —Ñ–æ—Ä–º–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —à–∞–±–ª–æ–Ω—ã. –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å. –ù–∞—Å—Ç—Ä–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º. –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–¥–ø–∏—à–∏—Å—å –∫–∞–∫ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è"}



    ]
   # print("Sending request to OpenAI with messages:", messages)
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        max_tokens=2000,
        n=1,
        temperature=0.65,
    )
   # print("Received response from OpenAI:", response)
    return response['choices'][0]['message']['content']









@bot.message_handler(content_types=['text'])
def handle_text(message):
    global info_text_storage
    user_first_name = message.from_user.first_name
    log_user_data_from_message(message)
    if message.text.lower().startswith("–æ–±—Ä–∞—â–µ–Ω–∏–µ"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        bot.send_message(message.chat.id, f'üòà')
        response = send_request_to_openai_2(message.chat.id, message.text[10:].strip())  # –ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ "–æ–±—Ä–∞—â–µ–Ω–∏–µ "
        bot.send_message(message.chat.id, response)
        return

    if message.text.lower().startswith("—Ç–æ—Ä "):
        handle_tor_message(message)
        return
    if message.text.lower() == "–∫–Ω–¥ –∫—Ä–∞–π":
        handle_knd_kraj_message(message)
        return
    if message.text.lower().startswith("–º—Å–∑—É "):
        bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
        handle_mszu_message(message)
        return
    if message.text.lower().startswith("2–º—Å–∑—É "):
        bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ú–°–ó–£ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π ')
        handle_2mszu_message(message)
        return

    base_text = f'–°'
    final_text = f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå'
    sent_message = bot.send_message(message.chat.id, base_text)
    animated_text(bot, sent_message.chat.id, sent_message.message_id, base_text, final_text)

    found_values_a, found_values_s = search_values(message.text)
    found_mszu_values = check_mszu_column_b(message.text)

    if not found_values_a and not found_values_s and not found_mszu_values:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É')
        return






   # found_values_a, found_values_s = search_values(message.text)

  #  if not found_values_a and not found_values_s:
      #  bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É')
      #  return

    # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ A
    allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315}
    if found_values_a:
        #bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name} –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ')
        found_values = found_values_a

        if len(found_values) == 1:
            latitude = found_values[0][7]  # –®–∏—Ä–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ H —Ç–∞–±–ª–∏—Ü—ã goroda2.0
            longitude = found_values[0][8]  # –î–æ–ª–≥–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ I —Ç–∞–±–ª–∏—Ü—ã goroda2.0
            weather_info = get_weather(latitude, longitude, "7cc8daec601b8354e0bc6350592d6f98")
            response = f'*{found_values[0][1]}:*\n\n{weather_info}\n–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è (2010 –≥.): {found_values[0][2]} —á–µ–ª.\n–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è (2020 –≥.): {found_values[0][5]} —á–µ–ª.\n–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: {found_values[0][3]}\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {get_value(found_values[0], 9)}\n–ü—Ä–æ–≥—Ä–∞–º–º—ã: {get_value(found_values[0], 11)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: {get_value(found_values[0], 12)}'
            info_text_storage[message.chat.id] = response
            messages = split_message(response)

            bot.send_location(message.chat.id, latitude, longitude)

            for msg in messages:
                bot.send_message(message.chat.id, msg, parse_mode='Markdown')



            szofed_values = search_szofed_values(found_values[0][4])
            espd_values = search_espd_values(found_values[0][4])
            szoreg_values = search_szoreg_values(found_values[0][4])
            inline_keyboard = types.InlineKeyboardMarkup(row_width=3)
            if message.from_user.id in allowed_users:
                button_digital_ministry_info = types.InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
                inline_keyboard.add(button_digital_ministry_info)
                button_digital_ministry_info_post = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –í–ö", callback_data=json.dumps({"type": "digital_ministry_info_post", "chat_id": message.chat.id}))
                inline_keyboard.add(button_digital_ministry_info_post)

            if szofed_values or espd_values or szoreg_values or info_text_storage:


                if szofed_values:
                    print("Found szofed_values")
                    szofed_response = '–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Ä–∞–º–∫–∞—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Å 2019 –ø–æ 2021 –≥–æ–¥ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –°–ó–û:\n\n'
                    for i, row in enumerate(szofed_values, 1):
                        szofed_response += f'\n{i}. {row[8]} {row[9]} –ø–æ –∞–¥—Ä–µ—Å—É {row[4]}\n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–£–∑–µ–ª —Å–≤—è–∑–∏): {row[10]}\n–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {row[11]} –ú–±/—Å–µ–∫\n–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:{row[12]}.\n'
                    print("szofed_response:", szofed_response)
                    info_text_storage[message.chat.id] += szofed_response


                    print("info_text_storage:", info_text_storage)

                    callback_data = json.dumps({"type": "additional_info", "chat_id": message.chat.id})
                    additional_info_storage[message.chat.id] = szofed_response
                    button_additional_info = types.InlineKeyboardButton("–°–ó–û", callback_data=callback_data)
                    inline_keyboard.add(button_additional_info)

                if espd_values:
                    espd_response = '–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ï–°–ü–î –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ:\n\n'
                    for i, row in enumerate(espd_values, 1):
                        espd_response += f'\n{i}. {row[12]} –ø–æ –∞–¥—Ä–µ—Å—É: {row[8]},\n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[9]},\n–°–∫–æ—Ä–æ—Å—Ç—å: {row[13]}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{row[18]}.\n'

                    callback_data = json.dumps({"type": "espd_info", "chat_id": message.chat.id})
                    espd_info_storage[message.chat.id] = espd_response
                    button_espd_info = types.InlineKeyboardButton("–ï–°–ü–î", callback_data=callback_data)
                    inline_keyboard.add(button_espd_info)

                # szoreg_values = search_szoreg_values(found_values[0][4])
                if szoreg_values:
                    szoreg_response = '–°–ó–û –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —É—Å–ª—É–≥–∏ –∑–∞ —Å—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∫—Ä–∞–µ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞:\n\n'
                    for i, row in enumerate(szoreg_values, 1):
                        szoreg_response += f'\n{i}. {row[8]} –ø–æ –∞–¥—Ä–µ—Å—É {row[5]} \n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[6]}\n–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {row[9]}.\n'

                    callback_data = json.dumps({"type": "szoreg_info", "chat_id": message.chat.id})
                    szoreg_info_storage[message.chat.id] = szoreg_response
                    button_szoreg_info = types.InlineKeyboardButton("–°–ó–û (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ì–ö)",callback_data=callback_data)
                    inline_keyboard.add(button_szoreg_info)

                bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)
            response_storage[message.chat.id] = response

            bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "additional_info")(handle_additional_info)
            bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "espd_info")(handle_espd_info)
            bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "szoreg_info")(handle_szoreg_info)
            bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "digital_ministry_info")(handle_digital_ministry_info)
            bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "digital_ministry_info_post")(handle_digital_ministry_info_post)


        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

        if len(found_values) > 1:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º 1 –∏ 2
            values = [(get_value(row, 1), get_value(row, 2)) for row in found_values]
            values_with_numbers = [f"{i + 1}. {value[0]}" for i, value in enumerate(values)]
            msg = '\n'.join(values_with_numbers)

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            messages = split_message(f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. \n\n{msg}')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–±–∏—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages:
                bot.send_message(message.chat.id, msg)
            # latitude = found_values[0][7]  # –®–∏—Ä–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ H —Ç–∞–±–ª–∏—Ü—ã goroda2.0
            # longitude = found_values[0][8]  # –î–æ–ª–≥–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ I —Ç–∞–±–ª–∏—Ü—ã goroda2.0

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
            # bot.send_location(message.chat.id, latitude, longitude)
            # –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            buttons = [str(i + 1) for i in range(len(found_values))]
            buttons.append("–û—Ç–º–µ–Ω–∞")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)

            keyboard.add(*buttons)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:', reply_markup=keyboard)
            bot.register_next_step_handler(message, lambda x: handle_choice(x, found_values, keyboard))

    # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ S
    if found_values_s:
        found_values = found_values_s
        data = []
        for row in found_values_s:
            if len(row) >= 22:
                data.append([row[17], row[2], row[3], row[9], row[11], row[12], row[21]])
            else:
                print(f"Skipping row due to insufficient elements: {row}")

        if len(found_values) > 0:
            response = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ù–∞—Å–µ–ª–µ–Ω–∏–µ | –°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å | –ò–Ω—Ç–µ—Ä–Ω–µ—Ç | –ü—Ä–æ–≥—Ä–∞–º–º–∞ | –¢–∞–∫—Å–æ—Ñ–æ–Ω | –°–ó–û (—É–∑–µ–ª)\n'
            response += '-' * 71 + '\n'
            print(found_values_s)
            for row in found_values:
                if len(row) >= 22:
                    response += f"{row[17]} | {row[2]} | {row[3]} | {row[9]} | {row[11]} | {row[12]} | {row[19]}\n"

            excel_file = create_excel_file_2(headers, data)
            user_first_name = message.from_user.first_name

            file_name = found_values[0][18] if found_values else "table"

            with create_excel_file_2(headers, data) as file:
                file.name = f'{file_name}.xlsx'
                bot.send_document(message.chat.id, file)

    if found_mszu_values:
        if len(found_mszu_values) == 1:
            response = f"\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: \n{found_mszu_values[0][2]}\n‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä): {found_mszu_values[0][0]}\n–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {found_mszu_values[0][3]}\n–û—Ç–≤. –≤ –ø–ª–∞–Ω–µ: {found_mszu_values[0][6]}\n–ï–°–ù–°–ò: {found_mszu_values[0][8]}\n–ï–ü–ì–£: {found_mszu_values[0][10]}"
            bot.send_message(message.chat.id, response)

            # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π
            inline_keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ê–¥—Ä–µ—Å –ò–§–ó", url=found_mszu_values[0][13])
            inline_keyboard.add(url_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–æ–π
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=inline_keyboard)

        elif len(found_mszu_values) > 1:
            values_with_numbers = [f"{i + 1}. {value[2]}" for i, value in enumerate(found_mszu_values)]
            msg = '\n'.join(values_with_numbers)
            messages = split_message(f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π:\n\n{msg}')
            for msg in messages:
                bot.send_message(message.chat.id, msg)

            buttons = [str(i + 1) for i in range(len(found_mszu_values))]
            buttons.append("–û—Ç–º–µ–Ω–∞")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            keyboard.add(*buttons)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:', reply_markup=keyboard)
            bot.register_next_step_handler(message, lambda x: handle_mszu_choice(x, found_mszu_values, keyboard))

def handle_mszu_message(message):
    print(f"Handling MSZU message: {message.text}")  #
    found_values = check_mszu_mo(message.text)
    if found_values:
        response = ""
        for i, row in enumerate(found_values):
            response += f"{i + 1}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–ú–°–£ –∏–∑ –ï–°–ù–°–ò: {row[10]}\n" \
                        f"‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä) : {row[0]}\n" \
                        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {row[2]}\n" \
                        f"–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {row[3]}\n\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é split_message
        response_parts = split_message(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        for part in response_parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")



def handle_2mszu_message(message):
    print(f"Handling MSZU message: {message.text}")
    found_values = check_mszu_mo_2(message.text)
    if found_values:
        message_storage[message.chat.id] = message.text
        unique_values = list(set([row[12] for row in found_values]))
        unique_values.sort()

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

        numbered_list = ""
        for i, value in enumerate(unique_values):
            markup.add(types.KeyboardButton(str(i + 1)))  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–π
            numbered_list += f"{i + 1}. {value}\n"

        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:\n\n{numbered_list}", reply_markup=markup)
        bot.register_next_step_handler(msg, handle_unique_value_selection)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")




def handle_unique_value_selection(message):
    user_message = message_storage[message.chat.id]
    selected_number = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    found_values = check_mszu_mo_2(user_message)
    unique_values = list(set([row[12] for row in found_values]))
    unique_values.sort()
    selected_value = unique_values[selected_number - 1]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É

    selected_rows = [row for row in found_values if row[12] == selected_value]
    response = ""
    for i, row in enumerate(selected_rows):
        response += f"{i + 1}. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–ú–°–£ –∏–∑ –ï–°–ù–°–ò: {row[10]}\n" \
                    f"‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä) : {row[0]}\n" \
                    f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {row[2]}\n" \
                    f"–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {row[3]}\n\n"

    response_parts = split_message(response)

    for part in response_parts:
        if part.strip():
            bot.send_message(message.chat.id, part)









user_messages = {}

def handle_tor_message(message):

    query = message.text[4:]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ "—Ç–æ—Ä "
    service = build('sheets', 'v4', credentials=creds)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header_result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID, range='nst!H1:X1'
    ).execute()
    column_headers = header_result.get('values', [])[0]

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ A –Ω–∞ –ª–∏—Å—Ç–µ nst
    nst_result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID, range='nst!A1:X150'
    ).execute()
    nst_rows = nst_result.get('values', [])
    nst_matches = [
        row for row in nst_rows if row and normalize_text_v2(query) == normalize_text_v2(row[0])
    ]

    if nst_matches:
        all_responses = []
        total_yes_count = 0
        total_no_count = 0

        for row in nst_matches:
            institution_name = row[5]
            response_parts = [f"{institution_name}:\n\n"]
            yes_count = 0
            no_count = 0

            for i in range(7, 24):
                column_header = column_headers[i - 7]
                cell_value = row[i]

                if cell_value == "–ï—Å—Ç—å":
                    cell_value = f"üü¢{column_header}\n"
                    yes_count += 1
                elif cell_value == "–ù–µ—Ç":
                    cell_value = f"üî¥{column_header}\n"
                    no_count += 1

                response_parts.append(cell_value)

            response = " ".join(response_parts)
            all_responses.append(response)
            total_yes_count += yes_count
            total_no_count += no_count

        # Create and save the pie chart for the total counts
        pie_chart_filename = "pie_chart_total.png"
        create_pie_chart(total_yes_count, total_no_count, pie_chart_filename)

        # Combine all responses into one message
        combined_response = "\n\n".join(all_responses)
        messages = split_message(combined_response)

        # Send the pie chart
        bot.send_message(message.chat.id, '–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–û–†–ö–ù–î')
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É "–ø–æ–¥—Ä–æ–±–Ω–æ"
        markup = types.InlineKeyboardMarkup()
        detailed_button = types.InlineKeyboardButton("–ø–æ–¥—Ä–æ–±–Ω–æ", callback_data='{"type": "additional_info_tor"}')
        markup.add(detailed_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        with open(pie_chart_filename, 'rb') as chart_file:
            callback_data = json.dumps({
                "type": "additional_info_tor",
                "user_id": message.from_user.id
            })
            detailed_button = types.InlineKeyboardButton("–ø–æ–¥—Ä–æ–±–Ω–æ", callback_data=callback_data)
            markup = types.InlineKeyboardMarkup()
            markup.add(detailed_button)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
            user_messages[message.from_user.id] = messages

            bot.send_photo(message.chat.id, chart_file, reply_markup=markup)

            # Remove the pie chart file after sending
        os.remove(pie_chart_filename)
        user_messages[message.chat.id] = messages
    else:
        bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")

def handle_mszu_choice(message, found_mszu_values, keyboard):
    choice = message.text.strip()
    if choice.isdigit():
        index = int(choice) - 1
        if 0 <= index < len(found_mszu_values):
            response = f"\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: \n{found_mszu_values[index][2]}\n‚Ññ –≤ –†–µ–≥.–ø–µ—Ä–µ—á–Ω–µ (17-—Ä): {found_mszu_values[index][0]}\n–û—Ç–≤–µ—Ç. –†–û–ò–í –≤ —Ä–µ–≥.–ø–µ—Ä–µ—á–Ω–µ: {found_mszu_values[index][3]}\n–û—Ç–≤. –≤ –ø–ª–∞–Ω–µ: {found_mszu_values[index][6]}\n–ï–°–ù–°–ò: {found_mszu_values[index][8]}\n–ï–ü–ì–£: {found_mszu_values[index][10]}"
            bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())
            inline_keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="–ê–¥—Ä–µ—Å –ò–§–ó", url=found_mszu_values[index][13])
            inline_keyboard.add(url_button)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–æ–π
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=inline_keyboard)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', reply_markup=keyboard)
            bot.register_next_step_handler(message, lambda x: handle_mszu_choice(x, found_mszu_values, keyboard))
    elif choice.lower() == "–æ—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞".', reply_markup=keyboard)
        bot.register_next_step_handler(message, lambda x: handle_mszu_choice(x, found_mszu_values, keyboard))




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: json.loads(call.data)["type"] == "additional_info_tor")
def detailed_button_callback(call):
    user_first_name = call.from_user.first_name
    bot.send_message(call.message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–±—è')
    time.sleep(3)

    # –ü–æ–ª—É—á–∞–µ–º messages –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    callback_data = json.loads(call.data)
    user_id = callback_data["user_id"]
    messages = user_messages.get(user_id, [])

    for msg in messages:
        bot.send_message(call.message.chat.id, msg)
    bot.answer_callback_query(call.id)
    time.sleep(2)
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å')




def handle_knd_kraj_message(message):
    service = build('sheets', 'v4', credentials=creds)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã nst
    nst_result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID, range='nst!A1:X150'
    ).execute()
    nst_rows = nst_result.get('values', [])

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π "–ï—Å—Ç—å" –∏ "–ù–µ—Ç" –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ A
    counter = {}
    for row in nst_rows:
        key = row[0]
        yes_count = sum([1 for value in row[7:24] if value == "–ï—Å—Ç—å"])
        no_count = sum([1 for value in row[7:24] if value == "–ù–µ—Ç"])

        if key in counter:
            counter[key] = (key, yes_count + counter[key][1], no_count + counter[key][2])
        else:
            counter[key] = (key, yes_count, no_count)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    bar_chart_filename = 'bar_chart.png'
    create_bar_chart(list(counter.values()), bar_chart_filename)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    with open(bar_chart_filename, 'rb') as chart_file:
        bot.send_photo(message.chat.id, chart_file)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(bar_chart_filename)

COLUMNS_TO_EXPORT = [1, 2, 3, 6, 7]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
TABLE_HEADERS = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–∞–∫—Å–æ—Ñ–æ–Ω"]


def handler_fp_message(message, fp_data, fp_headers):

    time.sleep(1)
    try:
        data = [
            [row[0], row[1], row[2], row[4], row[5]]
            for row in fp_data[1:]
        ]
        headers = ['–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞', '–ê–¥—Ä–µ—Å', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è', '–°–∫–æ—Ä–æ—Å—Ç—å']

        excel_file = create_excel_file(headers, data)
        user_first_name = message.from_user.first_name
        #bot.send_message(message.chat.id, f'–°–µ–∫—É–Ω–¥–æ—á–∫—É, {user_first_name}üòå')
        #time.sleep(2)
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ—á–µ–Ω—å –§–ê–ü –∏–∑ –≥–æ—Å–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:')
        file_name = '–§–ê–ü'

        with BytesIO(excel_file) as file:
            file.name = f'{file_name}.xlsx'
            bot.send_document(message.chat.id, file)

    except Exception as e:
        logging.exception(e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def handler_aggoics_message(message, aggoics_data, aggoics_headers):

    time.sleep(1)
    try:
        data = [
            [row[0], row[1], row[2], row[3], row[4], row[5]]
            for row in aggoics_data[1:]
        ]

        excel_file = create_excel_file(aggoics_headers, data)



        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ê–≥–ì–û–∏–ß–°:')
        file_name = '–ê–≥–ì–û–∏–ß–°'

        with BytesIO(excel_file) as file:
            file.name = f'{file_name}.xlsx'
            bot.send_document(message.chat.id, file)

    except Exception as e:
        logging.exception(e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def handler_otpusk_message(message, employees_on_vacation):
    if len(employees_on_vacation) > 0:
        response = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –æ—Ç–ø—É—Å–∫–µ:\n\n"
        for employee in employees_on_vacation:
            response += f"{employee[0]} ({employee[1]})\n"
        time.sleep(2)
        bot.send_message(message.chat.id, response)
    else:
        time.sleep(2)
        bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ.")





def handle_choice(message, found_values, keyboard):
    global info_text_storage
    user_first_name = message.from_user.first_name


    allowed_users = {964635576, 1063749463, 374056328, 572346758, 434872315}
    szoreg_response = ""
    espd_response = ""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.', reply_markup=types.ReplyKeyboardRemove())
        return
    try:
        index = int(message.text)
        if index <= 0 or index > len(found_values):
            raise ValueError
        latitude = found_values[index - 1][7]  # –®–∏—Ä–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ H —Ç–∞–±–ª–∏—Ü—ã goroda2.0
        longitude = found_values[index - 1][8]
        weather_info = get_weather(latitude, longitude, "7cc8daec601b8354e0bc6350592d6f98")
        response = f'*{get_value(found_values[index - 1], 1)}:*\n\n{weather_info}\n–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è (2010 –≥): {get_value(found_values[index - 1], 2)} —á–µ–ª.\n–ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è (2010 –≥): {get_value(found_values[index - 1], 5)} —á–µ–ª.\n–°–æ—Ç–æ–≤–∞—è —Å–≤—è–∑—å: {get_value(found_values[index - 1], 3)}\n–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {get_value(found_values[index - 1], 9)}\n–ü—Ä–æ–≥—Ä–∞–º–º—ã: {get_value(found_values[index - 1], 11)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫—Å–æ—Ñ–æ–Ω–æ–≤: {get_value(found_values[index - 1], 12)}'
        info_text_storage[message.chat.id] = response
        messages = split_message(response)
        bot.send_location(message.chat.id, latitude, longitude)
        for msg in messages:
            bot.send_message(message.chat.id, msg, parse_mode='Markdown')
          # –î–æ–ª–≥–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–æ–ª–±—Ü–µ I —Ç–∞–±–ª–∏—Ü—ã goroda2.0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞


        inline_keyboard = types.InlineKeyboardMarkup()

        if message.from_user.id in allowed_users:
            button_digital_ministry_info = types.InlineKeyboardButton("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data=json.dumps({"type": "digital_ministry_info", "chat_id": message.chat.id}))
            inline_keyboard.add(button_digital_ministry_info)
            button_digital_ministry_info_post = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –í–ö", callback_data=json.dumps({"type": "digital_ministry_info_post", "chat_id": message.chat.id}))
            inline_keyboard.add(button_digital_ministry_info_post)
        szofed_values = search_szofed_values(found_values[index - 1][4])
        #bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "digital_ministry_info")(handle_digital_ministry_info)
        if szofed_values:
            szofed_response = '–í —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ —Ä–∞–º–∫–∞—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Å 2019 –ø–æ 2021 –≥–æ–¥ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –°–ó–û:\n\n'
            for i, row in enumerate(szofed_values, 1):
                szofed_response += f'\n{i}. {row[8]} {row[9]} –ø–æ –∞–¥—Ä–µ—Å—É {row[4]}\n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–£–∑–µ–ª —Å–≤—è–∑–∏): {row[10]}\n–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {row[11]} –ú–±/—Å–µ–∫\n–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:{row[12]}.\n'

            info_text_storage[message.chat.id] += szofed_response
            callback_data = json.dumps({"type": "additional_info", "chat_id": message.chat.id})
            additional_info_storage[message.chat.id] = szofed_response
            button_additional_info = types.InlineKeyboardButton("–°–ó–û", callback_data=callback_data)
            inline_keyboard.add(button_additional_info)

        espd_values = search_espd_values(found_values[index - 1][4])
        if espd_values:
            espd_response = '–¢–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ï–°–ü–î –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ:\n\n'
            for i, row in enumerate(espd_values, 1):
                espd_response += f'\n{i}. {row[12]} –ø–æ –∞–¥—Ä–µ—Å—É: {row[8]},\n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[9]},\n–°–∫–æ—Ä–æ—Å—Ç—å: {row[13]}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:{row[18]}.\n'

            callback_data = json.dumps({"type": "espd_info", "chat_id": message.chat.id})
            espd_info_storage[message.chat.id] = espd_response
            button_espd_info = types.InlineKeyboardButton("–ï–°–ü–î", callback_data=callback_data)
            inline_keyboard.add(button_espd_info)


        szoreg_values = search_szoreg_values(found_values[index - 1][4])
        if szoreg_values:
            szoreg_response = '–°–ó–û –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —É—Å–ª—É–≥–∏ –∑–∞ —Å—á–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∫—Ä–∞–µ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞:\n\n'
            for i, row in enumerate(szoreg_values, 1):
                szoreg_response += f'\n{i}. {row[8]} –ø–æ –∞–¥—Ä–µ—Å—É {row[5]} \n–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {row[6]}\n–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {row[9]}.\n'

            callback_data = json.dumps({"type": "szoreg_info", "chat_id": message.chat.id})
            szoreg_info_storage[message.chat.id] = szoreg_response
            button_szoreg_info = types.InlineKeyboardButton("–°–ó–û (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ì–ö)", callback_data=callback_data)

        if szofed_values or espd_values or info_text_storage or szoreg_values:

            bot.send_message(message.chat.id, "‚¨áÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚¨áÔ∏è", reply_markup=inline_keyboard)
        #bot.send_message(message.chat.id, "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=inline_keyboard)
        bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "additional_info")(handle_additional_info)
        bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "espd_info")(handle_espd_info)
        bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "szoreg_info")(handle_szoreg_info)
        bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "digital_ministry_info")(handle_digital_ministry_info)
        bot.callback_query_handler(lambda query: json.loads(query.data)["type"] == "digital_ministry_info_post")(handle_digital_ministry_info_post)


        return
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


def handle_additional_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in additional_info_storage:
        response = additional_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                bot.send_message(chat_id, msg)

        bot.answer_callback_query(query.id)
    else:
        bot.answer_callback_query(query.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def handle_espd_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in espd_info_storage:
        response = espd_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                bot.send_message(chat_id, msg)

        bot.answer_callback_query(query.id)
    else:
        bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ï–°–ü–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


def handle_szoreg_info(query):
    chat_id = json.loads(query.data)["chat_id"]
    if chat_id in szoreg_info_storage:
        response = szoreg_info_storage[chat_id]
        messages = split_message(response)
        for message_group in messages:
            msg = ''.join(message_group)
            if msg.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                bot.send_message(chat_id, msg)

        bot.answer_callback_query(query.id)
    else:
        bot.answer_callback_query(query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –°–ó–û (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")






if __name__ == "__main__":
    bot.polling(none_stop=True, timeout=100)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 50 —Å–µ–∫—É–Ω–¥
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except ReadTimeoutError:
            print("–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
